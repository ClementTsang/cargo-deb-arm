# A simple test to test the functionality the action.

name: "Test"

on:
  pull_request:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [main]

jobs:
  dockerfile-simple:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        triple:
          - {
              filePath: "Dockerfile",
              arch: "aarch64-unknown-linux-gnu",
              dpkg: "arm64",
            }
          - {
              filePath: "docker/Dockerfile.aarch64-unknown-linux-gnu",
              arch: "aarch64-unknown-linux-gnu",
              dpkg: "arm64",
            }
          - {
              filePath: "docker/Dockerfile.armv7-unknown-linux-gnueabihf",
              arch: "armv7-unknown-linux-gnueabihf",
              dpkg: "armhf",
            }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Dockerfile
        run: |
          docker build -t test -f ${{ matrix.triple.filePath }} .

      - name: Run Dockerfile
        run: |
          docker run -t --rm --mount type=bind,source="$(pwd)",target=/volume test "--target ${{ matrix.triple.arch }} --variant ${{ matrix.triple.dpkg }}" "/volume/test/hello_world"

      - name: Check dpkg information
        run: |
          cd test/hello_world
          cp ./target/${{ matrix.triple.arch }}/debian/hello_world*.deb ./hello_world.deb
          dpkg -I hello_world.deb
          dpkg -I hello_world.deb | grep ${{ matrix.triple.dpkg }} && echo "Found correct architecture"

  action-no-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tuple:
          - { arch: "aarch64-unknown-linux-gnu", dpkg: "arm64" }
          - { arch: "armv7-unknown-linux-gnueabihf", dpkg: "armhf" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@ba37adf8f94a7d9affce79bd3baff1b9e3189c33 # https://github.com/dtolnay/rust-toolchain/commit/ba37adf8f94a7d9affce79bd3baff1b9e3189c33
        with:
          toolchain: stable
          target: ${{ matrix.tuple.arch }}

      - uses: Swatinem/rust-cache@22c9328bcba27aa81a32b1bef27c7e3c78052531 # 2.0.1
        with:
          cache-on-failure: true
          workspaces: "./test/hello_world"

      - name: Build
        run: |
          cd test/hello_world
          cargo install cross
          cross build --release --verbose --target ${{ matrix.tuple.arch }}

      - name: Run cargo deb
        uses: ./
        with:
          args: --no-build --target ${{ matrix.tuple.arch }}
          working-directory: test/hello_world

      - name: Check dpkg information
        run: |
          cd test/hello_world
          cp ./target/${{ matrix.tuple.arch }}/debian/hello_world_*.deb ./hello_world.deb
          dpkg -I hello_world.deb | grep ${{ matrix.tuple.dpkg }} && echo "Found correct architecture"

  action-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tuple:
          - { arch: "aarch64-unknown-linux-gnu", dpkg: "arm64" }
          - { arch: "armv7-unknown-linux-gnueabihf", dpkg: "armhf" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run cargo deb
        uses: ./
        with:
          args: --target ${{ matrix.tuple.arch }}
          working-directory: test/hello_world

      - name: Check dpkg information
        run: |
          cd test/hello_world
          cp ./target/${{ matrix.tuple.arch }}/debian/hello_world_*.deb ./hello_world.deb
          dpkg -I hello_world.deb | grep ${{ matrix.tuple.dpkg }} && echo "Found correct architecture"
